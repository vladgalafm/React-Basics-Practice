{"version":3,"sources":["components/ShowUsers.js","components/OverallInfo.js","components/UserLine.js","App.js","serviceWorker.js","index.js"],"names":["ShowUsers","props","styles","data","displayButton","display","react_default","a","createElement","className","style","onClick","handleClick","OverallInfo","displayStats","totalUsers","totalChecked","UserLine","data-user","id","type","checked","isChecked","onChange","handleChange","value","match","exec","concat","dateParse","createdAt","name","email","description","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayUsers","usersData","bind","assertThisInitialized","showAllUsers","_this2","fetch","then","response","json","forEach","user","setState","length","flag","_this3","prevState","updatedUsersData","map","label","document","querySelector","classList","add","remove","_this4","console","dir","components_UserLine","key","Fragment","components_ShowUsers","components_OverallInfo","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d95aa6e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './show-users.css';\r\n\r\nfunction ShowUsers(props) {\r\n  const styles = {};\r\n\r\n  (props.data.displayButton) ? (styles.display = 'block') : (styles.display = 'none');\r\n\r\n  return (\r\n    <button className=\"show-users\" style={styles} onClick={props.handleClick}>Show Users</button>\r\n  );\r\n}\r\n\r\nexport default ShowUsers;","import React from 'react';\r\nimport './overall-info.css';\r\n\r\nfunction OverallInfo(props) {\r\n  const styles = {};\r\n\r\n  (props.data.displayStats) ? (styles.display = 'block') : (styles.display = 'none');\r\n\r\n  return (\r\n    <div className=\"overall-info\" style={styles}>\r\n      <p>Total: {props.data.totalUsers} user{(props.data.totalUsers !== 1) && 's'}</p>\r\n      <p>Checked: {props.data.totalChecked} user{(props.data.totalChecked !== 1) && 's'}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OverallInfo;","import React from 'react';\r\nimport './user-line.css';\r\n\r\nfunction UserLine(props) {\r\n  const dateParse = (value) => {\r\n    const match = /(\\d{4})-(\\d{2})-(\\d{2})/.exec(value);\r\n    return `${match[1]}.${match[2]}.${match[3]}`;\r\n  };\r\n\r\n  return (\r\n    <label className=\"user-line\" data-user={props.data.id}>\r\n      <input className=\"user-line__checkbox\" id={props.data.id} type=\"checkbox\" checked={props.data.isChecked} onChange={() => props.handleChange(props.data.id)} />\r\n      <span className=\"user-line__id\">{props.data.id}</span>\r\n      <span className=\"user-line__created-at\">{dateParse(props.data.createdAt)}</span>\r\n      <span className=\"user-line__name\">{props.data.name}</span>\r\n      <span className=\"user-line__email\">{props.data.email}</span>\r\n      <span className=\"user-line__description\">{props.data.description}</span>\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default UserLine;","import React, { Component } from 'react';\r\nimport './app.css';\r\nimport ShowUsers from './components/ShowUsers';\r\nimport OverallInfo from './components/OverallInfo';\r\nimport UserLine from './components/UserLine';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      displayButton: true,\r\n      displayStats: false,\r\n      displayUsers: false,\r\n      totalUsers: 0,\r\n      totalChecked: 0,\r\n      usersData: [],\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.showAllUsers = this.showAllUsers.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    fetch('https://tanuhaua.github.io/datas-file-json/visitors.json')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        data.forEach(user => {\r\n          user.isChecked = false;\r\n        });\r\n        this.setState({\r\n          usersData: data,\r\n          displayButton: false,\r\n          displayStats: true,\r\n          displayUsers: true,\r\n          totalUsers: data.length,\r\n        });\r\n      });\r\n  }\r\n\r\n  handleChange(id) {\r\n    let flag;\r\n    this.setState(prevState => {\r\n      const updatedUsersData = prevState.usersData.map(user => {\r\n        if (user.id === id) {\r\n          (user.isChecked) ? (flag = -1) : (flag = 1);\r\n          user.isChecked = !user.isChecked;\r\n        }\r\n        return user;\r\n      });\r\n      return {\r\n        totalChecked: this.state.totalChecked + flag,\r\n        usersData: updatedUsersData,\r\n      };\r\n    });\r\n    const label = document.querySelector(`[data-user=\"${id}\"]`);\r\n    const checkbox = label.querySelector('.user-line__checkbox');\r\n    (checkbox.checked === true) ? label.classList.add('user-line--checked') : label.classList.remove('user-line--checked');\r\n  }\r\n\r\n  showAllUsers() {\r\n    if (this.state.displayUsers) {\r\n      console.dir(this.state.usersData);\r\n      return this.state.usersData.map(user => <UserLine key={user.id} data={user} handleChange={this.handleChange} />);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ShowUsers\r\n          handleClick={this.handleClick}\r\n          data={this.state}\r\n        />\r\n        <OverallInfo\r\n          data={this.state}\r\n        />\r\n        {this.showAllUsers()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}